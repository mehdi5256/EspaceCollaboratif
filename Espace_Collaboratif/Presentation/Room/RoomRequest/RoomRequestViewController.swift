//
//  RoomRequestViewController.swift
//  Espace_Collaboratif
//
//  Created by mehdi on 9/6/20.
//  Copyright (c) 2020 mehdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol RoomRequestDisplayLogic: class
{
  func displaySomething(viewModel: RoomRequest.Something.ViewModel)
    func displayRoomRequestSuccess(roomrequest: [RoomRequest1])
       func displayRoomRequestError(error: String)
}

class RoomRequestViewController: UIViewController, RoomRequestDisplayLogic
{
    
   
    
  var interactor: RoomRequestBusinessLogic?
  var router: (NSObjectProtocol & RoomRequestRoutingLogic & RoomRequestDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = RoomRequestInteractor()
    let presenter = RoomRequestPresenter()
    let router = RoomRequestRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
    
    
    var roomrequestArray: [RoomRequest1] = []

    @IBOutlet weak var tv: UITableView!
    
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    interactor?.getRoomRequest(token: UserDefaultLogged.tokenUD)

    }
    
    
    
    override func viewWillAppear(_ animated: Bool) {
        tv.register(UINib(nibName: "RoomRequestTableViewCell", bundle: nil), forCellReuseIdentifier: "RoomRequestTableViewCell")
        

        
        
        
    }
    
    
    func displayRoomRequestSuccess(roomrequest: [RoomRequest1]) {
        self.roomrequestArray = roomrequest
        tv.reloadData()

        
    }
    
    func displayroomsappdelegate(roomrequest: [RoomRequest1]) {
        
    }
        
    
    func displayRoomRequestError(error: String) {
        print(error)
        
    }
    
    
     
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = RoomRequest.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: RoomRequest.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}

extension RoomRequestViewController:UITableViewDelegate,UITableViewDataSource{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let tabItems = tabBarController?.tabBar.items {
            // In this case we want to modify the badge number of the third tab:
            let tabItem = tabItems[2]
            tabItem.badgeValue = String(roomrequestArray.count)
        }
        return roomrequestArray.count
        
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let roomrequestcell = tv.dequeueReusableCell(withIdentifier: "RoomRequestTableViewCell", for: indexPath) as! RoomRequestTableViewCell
        
        roomrequestcell.delegate = self
        roomrequestcell.Accept.tag = indexPath.row

        
        roomrequestcell.GroupeName.text = roomrequestArray[indexPath.row].room.name
        roomrequestcell.Username.text = roomrequestArray[indexPath.row].user.firstName
        roomrequestcell.username2.text = roomrequestArray[indexPath.row].user.firstName + " " + roomrequestArray[indexPath.row].user.lastName
        
        let imageuser = roomrequestArray[indexPath.row].user.image
        
        roomrequestcell.userimage.kf.setImage(with: URL(string: imageuser), placeholder: UIImage(named: "loadingimage")) {
            result in
            switch result {
            case .success:
                break
            case .failure:
                roomrequestcell.userimage.image = UIImage(named: "loadingimage")!
            }
        }
        
        return roomrequestcell
    }
    
    
    
}

extension RoomRequestViewController:RoomRequestDelegate{
    func rejectDemande(tag: Int) {
             print(roomrequestArray[tag].id!)
                
                let headers: HTTPHeaders = [
                    "Authorization": "Bearer \(UserDefaultLogged.tokenUD)" ,
                       "Accept": "application/json"
                   ]
                AF.request("http://b03440bb0b0a.ngrok.io/roomrequest/reject/\(roomrequestArray[tag].id!)",method: .put, headers: headers).responseJSON{
                                 response in
                
                    print(UserDefaultLogged.tokenUD)
                        print(response.request)
                        print(response.response)
                        print(response.result)
        //            self.displayRoomRequestSuccess(roomrequest: self.roomrequestArray)
                    self.interactor?.getRoomRequest(token: UserDefaultLogged.tokenUD)
                }
                
    }
    
   
    func didButtonPressedRoomRequest(tag: Int) {
        print(roomrequestArray[tag].id!)
        
        let headers: HTTPHeaders = [
            "Authorization": "Bearer \(UserDefaultLogged.tokenUD)" ,
               "Accept": "application/json"
           ]
        AF.request("http://b03440bb0b0a.ngrok.io/roomrequest/accept/\(roomrequestArray[tag].id!)",method: .put, headers: headers).responseJSON{
                         response in
        
            print(UserDefaultLogged.tokenUD)
                print(response.request)
                print(response.response)
                print(response.result)
//            self.displayRoomRequestSuccess(roomrequest: self.roomrequestArray)
            self.interactor?.getRoomRequest(token: UserDefaultLogged.tokenUD)
        }
        
    }
    
    
    
    
}
