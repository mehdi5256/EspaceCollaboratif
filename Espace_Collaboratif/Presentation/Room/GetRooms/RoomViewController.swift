//
//  RoomViewController.swift
//  Espace_Collaboratif
//
//  Created by mehdi on 4/24/20.
//  Copyright (c) 2020 mehdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CRRefresh
import Kingfisher

protocol RoomDisplayLogic: class
{
  func displaySomething(viewModel: Room.Something.ViewModel)
    func displayListeSuccess(rooms: [Room1])
    func displayListeError(error: String)
}

class RoomViewController: UIViewController, RoomDisplayLogic
{
  var interactor: RoomBusinessLogic?
  var router: (NSObjectProtocol & RoomRoutingLogic & RoomDataPassing)?
   



  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = RoomInteractor()
    let presenter = RoomPresenter()
    let router = RoomRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
//  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
//  {
//    if let scene = segue.identifier {
//      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//      if let router = router, router.responds(to: selector) {
//        router.perform(selector, with: segue)
//      }
//    }
//  }
  
  // MARK: View lifecycle
    var rooms: [Room1] = []
    var usersCell: [User] = []
    
    @IBOutlet weak var BtnAddOutlet: UIButton!
    @IBOutlet weak var tv: UITableView!
    
    override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    setupButton()
    interactor?.getRooms()
    }
    
    func setupButton() {
        
        BtnAddOutlet.layer.cornerRadius = 25
        BtnAddOutlet.layer.masksToBounds = true
        BtnAddOutlet.clipsToBounds = true
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Room.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Room.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
 func displayListeSuccess(rooms: [Room1]){
        self.rooms = rooms
        print(rooms)
        tv.reloadData()
    }
    
    func displayListeError(error: String) {
        print(error)
    }
    
    @IBAction func AddRoomAction(_ sender: Any) {
//

//        let storyBoard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
//        let AddRoomViewController = storyBoard.instantiateViewController(withIdentifier: "AddRoomViewController") as! AddRoomViewController
//
//        AddRoomViewController.modalPresentationStyle = .fullScreen
//
//        self.present(AddRoomViewController, animated: true, completion: nil)
//        
//        print("clicked")
//         let storyboardg = UIStoryboard(name: "Main", bundle: nil)
//        let vc = storyboardg.instantiateViewController(withIdentifier: "AddRoomViewController") as! AddRoomViewController
//        navigationController?.pushViewController(vc,
//        animated: true)
        
    }
}

extension RoomViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.rooms.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

    guard let cell = tv.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as? RoomsTableViewCell else {
                                     return tv.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
                                 }
                  
        let roomindex = rooms[indexPath.item]
        cell.RoomName.text = roomindex.name!
        cell.UserName.text = roomindex.subject!
        cell.NumPoste.text  =  (roomindex.id!).description
        cell.selectionStyle = .none
        self.usersCell = roomindex.users
        
        let frequency = indexPath.item % 10;
        switch (frequency) {
        case 0:
            cell.setGradientBackground(colorOne: Colors.skyblue, colorTwo: Colors.skyblue2)
            break;
        case 1:
            cell.setGradientBackground(colorOne: Colors.purple, colorTwo: Colors.blue)
            break;
            
        case 2:
            cell.setGradientBackground(colorOne: Colors.purple1, colorTwo: Colors.purple2)
            break;
            
        case 3:
            cell.setGradientBackground(colorOne: Colors.orange1, colorTwo: Colors.orange2)
         break;
        case 4:
            cell.setGradientBackground(colorOne: Colors.lightGrey, colorTwo: Colors.veryDarkGrey)
            break;
        //up to case 9
        default:
            break;
        }
                  
        return  cell
}

}

extension RoomViewController: UICollectionViewDataSource,UICollectionViewDelegate{
    
    
    
    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
       // return usersCell.count
        return usersCell.count>4 ?  4 : usersCell.count;

        }
    
    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        //print(usersCell.count)

        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "collection", for: indexPath) as? UserCollectionViewCell
                   else{
                       return UserCollectionViewCell()
               }
             
        let image = self.usersCell[indexPath.item].image
        cell.lblnmbruser.text = "+" + (usersCell.count-4).description


       cell.UserImage.kf.setImage(with: URL(string: image), placeholder: UIImage(named: "ic_user")) {
           result in
           switch result {
           case .success:
               break
           case .failure:
               cell.UserImage.image = UIImage(named: "ic_user")!
           }
       }
        
        
        
        if (indexPath.item) < 3 {

            cell.lblnmbruser.isHidden = true


        }
        if (indexPath.item) == 3 {

                   cell.lblnmbruser.isHidden = false


               }
//        if (indexPath.item) >= 4{
//            
//            cell.isHidden = true
//            
//        }
     
        
        return cell
        
    }
    
    
}

extension RoomViewController: UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return CGSize(width: collectionView.bounds.width, height: collectionView.bounds.height)
    }
    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return -130
    }
    
    
   
    
    
}

extension RoomViewController:UITableViewDelegate{
    
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
           performSegue(withIdentifier: "todetail", sender: indexPath)
           
       }
       
       override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
              
              if segue.identifier == "todetail"{
                  let DVC = segue.destination as! MessengerViewController
                  let indice = sender as! IndexPath
                  //let showsDict = roomsArray[indice.row] as! Dictionary<String,Any>
                  DVC.nomroom = rooms[indice.row].name
                  DVC.idroom = rooms[indice.row].id
                  //DVC.overview = showsDict["summary"] as! String
                 // let imageDict = showsDict["image"] as! Dictionary<String,String>
                 // DVC.image = imageDict["medium"] as! String
                  // DVC.image = images[indice.row]
                  navigationItem.backBarButtonItem = UIBarButtonItem(title: DVC.nomroom , style: .plain, target: nil, action: nil)
                  
                  
              }
          }
}
