//
//  MessengerInteractor.swift
//  Espace_Collaboratif
//
//  Created by mehdi on 4/30/20.
//  Copyright (c) 2020 mehdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MessengerBusinessLogic
{
    func postImage(type: String, body: String, user: [String: Any], room: [String: Any], file: String)
    func getRoomById (id:Int)
    func PostMsg(type: String, file: String, room: [String: Any], user: [String: Any], body: String)
    
    func connect()
    func registerMessenger(id:Int)
    func send(idroom: Int, messagesend:String,type:String,file:String)
    func sendReaction(idroom: Int, message: Messenger1, type: String, reaction: Reaction)
}

protocol MessengerDataStore
{
  //var name: String { get set }
}

class MessengerInteractor: MessengerBusinessLogic, MessengerDataStore
{
   
    
    func send(idroom: Int, messagesend:String,type:String,file:String) {
        
        let body : Dictionary<String,Any> = ["type":type,"address":"chat.to.server","headers":[],"body":messagesend,"file":file,"firstName":UserDefaultLogged.firstNameUD ,"lastName": UserDefaultLogged.lasttNameUD,"user_img":UserDefaultLogged.IMGUD,"room_id":idroom ]

        worker?.send(eventBus: eventbus, body: body, channel:"chat.to.server").then {
                  result in
                  self.presenter?.sendMessageEventBus(result: result)
               }.catch { error in
                  self.presenter?.presentError(error: error.localizedDescription)
                  print("got error")
               }
    }
    
    func sendReaction(idroom: Int, message: Messenger1, type: String, reaction: Reaction) {
        let jsonDataReaction = try! JSONEncoder().encode(reaction)
        let jsonStringReaction = String(data: jsonDataReaction, encoding: .utf8)!
        let jsonDataMessage = try! JSONEncoder().encode(message)
        let jsonStringMessage = String(data: jsonDataMessage, encoding: .utf8)!
        
        let body : Dictionary<String,Any> = ["type":type,"address":"chat.to.server","headers":[],"room_id":idroom,"message":jsonDataMessage,"reaction":jsonStringReaction]
        worker?.send(eventBus: eventbus, body: body, channel:"chat.to.server").then {
           result in
           self.presenter?.sendMessageEventBus(result: result)
        }.catch { error in
           self.presenter?.presentError(error: error.localizedDescription)
           print("got error")
        }
    }
    
    func connect() {
         eventbus = EventBus(host: Keys.MobileIntegrationServer.baseURLEventBus , port: Keys.MobileIntegrationServer.basePortEventBus)
        
        worker = MessengerWorker()
     
        worker?.connect(eventBus: eventbus).then {
           result in
           self.presenter?.presentConnexionSuccess(result: result)
        }.catch { error in
           self.presenter?.presentError(error: error.localizedDescription)
           print("got error")
        }
    }
    
    func registerMessenger(id:Int){
         let _ = try! eventbus.register(address: "chat.to.client") {
            
             if ($0.body["room_id"].intValue == id){
                             //  let msgs: msgtest!
                print($0.body)
                if $0.body["type"].description == "TEXT" || $0.body["type"].description == "IMAGE" {
                    self.worker?.presentMessenger(bodyJson: $0.body).then {
                    messageQuestion in
                       self.presenter?.presentMessenger(messenger: messageQuestion)
                    }.catch { error in
                       self.presenter?.presentError(error: error.localizedDescription )
                    }
                }
                else if $0.body["type"].description == "reaction" {
                    self.worker?.presentReaction(bodyJson: $0.body).then {
                    reaction in
                        print("reaction")
                        print(reaction)
                        self.presenter?.presentReaction(reaction: reaction)
                    }.catch { error in
                       self.presenter?.presentError(error: error.localizedDescription )
                    }
                }
             }
         }
      }
    
    
    
 
    
  var presenter: MessengerPresentationLogic?
  var worker: MessengerWorker?
  //var name: String = ""
    var eventbus: EventBus!
  
  // MARK: Do something
    
  func getRoomById(id: Int) {
        worker = MessengerWorker()
              worker?.getRoomsById(id: id).then {
              roomdid in
              print(roomdid)
                self.presenter?.presentGetRoomByIdSuccess(roomdid: roomdid)
                  }.catch {
                  error in
              self.presenter?.presentGetRoomByIdError(error: error.localizedDescription)
              }
   }
    
    
    func PostMsg(type: String, file: String, room: [String: Any], user: [String: Any], body: String) {
        worker = MessengerWorker()
        worker?.PostMsg(type: type, file: file, room: room, user: user, body: body).then {
            msg in
            print(msg)

            self.presenter?.presentPostMsgdSuccess(msg: [msg])
                }.catch {
                error in
            self.presenter?.presentPostMsgdError(error: error.localizedDescription)
            }
            
            
            
        }
    
    func postImage(type: String, body: String, user: [String : Any], room: [String : Any], file: String) {
           worker = MessengerWorker()
        worker?.PostImage(type: type, body: body, user: user, room: room, file: file).then {
               img in
               print(img)

               self.presenter?.presentPostImgdSuccess(img: [img])
                   }.catch {
                   error in
               self.presenter?.presentPostImgError(error: error.localizedDescription)
               }
       }

    }
  

