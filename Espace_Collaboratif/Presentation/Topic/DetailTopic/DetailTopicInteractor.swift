//
//  DetailTopicInteractor.swift
//  Espace_Collaboratif
//
//  Created by mehdi on 8/7/20.
//  Copyright (c) 2020 mehdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailTopicBusinessLogic
{
  func doSomething(request: DetailTopic.Something.Request)
  func PostReply(reply:String,topic:[String: Any],user:[String: Any])

}


protocol DetailTopicDataStore
{
  //var name: String { get set }
}

class DetailTopicInteractor: DetailTopicBusinessLogic, DetailTopicDataStore
{
    
    
    func PostReply(reply: String, topic: [String : Any], user: [String : Any]) {
        worker = DetailTopicWorker()
        worker?.PostReply(reply: reply, topic: topic, user: user).then
            { reply in
                
                self.presenter?.presentzidReplySucess(response : reply)
        }.catch { error in
//            self.presenter?.presentAddRoomError(error: error.localizedDescription)
            print(error)
        }
    }
    
    
    
  var presenter: DetailTopicPresentationLogic?
  var worker: DetailTopicWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: DetailTopic.Something.Request)
  {
    worker = DetailTopicWorker()
    worker?.doSomeWork()
    
    let response = DetailTopic.Something.Response()
    presenter?.presentSomething(response: response)
  }
}
