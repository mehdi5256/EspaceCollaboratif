//
//  DetailTopicViewController.swift
//  Espace_Collaboratif
//
//  Created by mehdi on 8/7/20.
//  Copyright (c) 2020 mehdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TagListView
import Kingfisher
import Alamofire
import GrowingTextView


protocol DetailTopicDisplayLogic: class
{
  func displaySomething(viewModel: DetailTopic.Something.ViewModel)
}

class DetailTopicViewController: UIViewController, DetailTopicDisplayLogic
{
  var interactor: DetailTopicBusinessLogic?
  var router: (NSObjectProtocol & DetailTopicRoutingLogic & DetailTopicDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DetailTopicInteractor()
    let presenter = DetailTopicPresenter()
    let router = DetailTopicRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
    
    @IBOutlet weak var textreply: GrowingTextView!
    
    @IBOutlet weak var BtnSendReply: UIButton!
    
    @IBOutlet weak var scrollView: UIScrollView!
   @IBOutlet weak var tv: UITableView!
   @IBOutlet weak var tableHeight: NSLayoutConstraint!

    
    //outleet prepare
    
    @IBOutlet weak var listtag: TagListView!
    @IBOutlet weak var useriimg: UIImageView!
    @IBOutlet weak var nomuser: UILabel!
    @IBOutlet weak var dscrptionntopic: UILabel!
    @IBOutlet weak var titletopic: UILabel!
    
    @IBOutlet weak var textviewbotomconstraint: NSLayoutConstraint!
    
// variable  prepare
    
    var idtopic:Int?
    var userimg:String?
    var FirstName:String?
    var LastName:String?
    var TitreTopic:String?
    var descriiptionTopic:String?
    var arrtag :[String] = []
    var NumberReply:Int?
    
    
    let replyservice = ReplyService()
    
    var replyarray: [Reply1] = []




    override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    
    //Set table height to cover entire view
    //if navigation bar is not translucent, reduce navigation bar height from view height
    tableHeight.constant = self.view.frame.height-108
    self.tv.isScrollEnabled = false
    //no need to write following if checked in storyboard
    self.scrollView.bounces = false
    self.tv.bounces = true
    
    useriimg.kf.setImage(with: URL(string: userimg!))
    nomuser.text = (FirstName ?? "") + " " + (LastName ?? "")
    dscrptionntopic.text = descriiptionTopic
    titletopic.text =  TitreTopic
    listtag.removeAllTags()
    listtag.addTags(arrtag)
    
    fetchallreplies()
    design()
    
    textreply.contentInsetAdjustmentBehavior = .always
    automaticallyAdjustsScrollViewInsets = false

    
    // *** Customize GrowingTextView ***

    // *** Listen to keyboard show / hide ***
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillChangeFrame), name: UIResponder.keyboardWillChangeFrameNotification, object: nil)

    // *** Hide keyboard when tapping outside ***
    let tapGesture = UITapGestureRecognizer(target: self, action: #selector(tapGestureHandler))
    view.addGestureRecognizer(tapGesture)

    

    
  }
    
    deinit {
           NotificationCenter.default.removeObserver(self)
       }
    
     @objc private func keyboardWillChangeFrame(_ notification: Notification) {
            if let endFrame = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
                var keyboardHeight = UIScreen.main.bounds.height - endFrame.origin.y
                if #available(iOS 11, *) {
                    if keyboardHeight > 0 {
                        keyboardHeight = keyboardHeight - view.safeAreaInsets.bottom
                    }
                }
                textviewbotomconstraint.constant = keyboardHeight + 8
                view.layoutIfNeeded()
            }
        }

        @objc func tapGestureHandler() {
            view.endEditing(true)
        }
    
    
    func design(){
        textreply.layer.cornerRadius = 10
        textreply.layer.cornerRadius = 10
        textreply.layer.borderWidth = 1
        textreply.layer.borderColor = #colorLiteral(red: 0.4948643718, green: 0.4948643718, blue: 0.4948643718, alpha: 1)
        
    }
    
    func fetchallreplies(){
        replyservice.getAllReplies(id: idtopic!){ (rooms) in
            self.replyarray = rooms
            self.tv.reloadData()
           
            print(self.replyarray)
         
        }
    }
    
    func designbuttonaftersend(){
           textreply.text = ""
          // BtnSendReply.backgroundColor = #colorLiteral(red: 0.7540688515, green: 0.7540867925, blue: 0.7540771365, alpha: 1)
        //   BtnSendReply.isEnabled = false
           
       }
    @IBAction func SendReply(_ sender: Any) {
        
        if(textreply.text!.trimmingCharacters(in: .whitespacesAndNewlines).count > 0) {
                   BtnSendReply.isEnabled = false
               
            let myUrl = Keys.MobileIntegrationServer.baseURL + "/reply"
            
            let parameters: [String: Any] = [
                "reply":textreply.text,
                "topic":
                    [
                        "id":idtopic,
                    ],
                "user":
                    [
                        "id": UserDefaultLogged.idUD,
                ]
            ]
            
            AF.request(myUrl, method: .post, parameters: parameters,encoding: JSONEncoding.init())
                .responseJSON { response in
                    print(response.value)
                    self.designbuttonaftersend()
                    
                    let response = response as! NSDictionary

                    //example if there is an id
                    
                    let reply12 = Reply1(id: response.object(forKey: "id")! as? Int, reply:response.object(forKey: "reply") as? String , timestamp: response.object(forKey: "timestamp")! as! Int, user: User(id: "1", firstName: UserDefaultLogged.firstNameUD, lastName: UserDefaultLogged.lasttNameUD, email: UserDefaultLogged.emailUD, image: UserDefaultLogged.IMGUD, username: "mehdi"))
                    self.replyarray.insert(reply12, at: 0)
                 self.tv.insertRows(at: [IndexPath(row: 0, section: 0)], with: .top)
            }
            
            
               } else {
                   print("tesstt")
               }
        
        
        
        
        
    }
    
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = DetailTopic.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: DetailTopic.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}

extension DetailTopicViewController:UITableViewDataSource,UITableViewDelegate{
    
      func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return replyarray.count
        }
        
   func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        
        let view = UIView(frame: CGRect(x: 0, y: 0, width: 20, height: 60))
        let label = UILabel(frame: CGRect(x: 30, y: 5, width: tableView.frame.width, height: 50))
    label.text = "RÃ©ponses (\(NumberReply!))"
        view.backgroundColor = #colorLiteral(red: 0.9182453156, green: 0.9182668328, blue: 0.9182552695, alpha: 1)

        label.textAlignment = .left
        label.font = UIFont(name:"HelveticaNeue-Bold", size: 18.0)
        view.addSubview(label)
        
        return view

    }
        func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
            return 60.0
        }
        
        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
            let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! ReplyTableViewCell
            
            //user info
            let image = replyarray[indexPath.row].user.image
            cell.userimg.kf.setImage(with: URL(string: image))
            cell.username.text = replyarray[indexPath.row].user.firstName + " " + replyarray[indexPath.row].user.lastName
            
            cell.reponse.text = replyarray[indexPath.row].reply
            
            return cell
        }
        
        func scrollViewDidScroll(_ scrollView: UIScrollView) {
            if scrollView == self.scrollView {
                tv.isScrollEnabled = (self.scrollView.contentOffset.y >= 200)
            }
            
            if scrollView == self.tv {
                self.tv.isScrollEnabled = (tv.contentOffset.y > 0)
            }
        }
    
}


extension DetailTopicViewController: GrowingTextViewDelegate {
    
    // *** Call layoutIfNeeded on superview for animation when changing height ***
    
    func textViewDidChangeHeight(_ textView: GrowingTextView, height: CGFloat) {
        UIView.animate(withDuration: 0.3, delay: 0.0, usingSpringWithDamping: 0.7, initialSpringVelocity: 0.7, options: [.curveLinear], animations: { () -> Void in
            self.view.layoutIfNeeded()
        }, completion: nil)
    }
    
   
}
    

