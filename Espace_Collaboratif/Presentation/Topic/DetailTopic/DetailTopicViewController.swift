//
//  DetailTopicViewController.swift
//  Espace_Collaboratif
//
//  Created by mehdi on 8/7/20.
//  Copyright (c) 2020 mehdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TagListView
import Kingfisher
import Alamofire

protocol DetailTopicDisplayLogic: class
{
  func displaySomething(viewModel: DetailTopic.Something.ViewModel)
}

class DetailTopicViewController: UIViewController, DetailTopicDisplayLogic
{
  var interactor: DetailTopicBusinessLogic?
  var router: (NSObjectProtocol & DetailTopicRoutingLogic & DetailTopicDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DetailTopicInteractor()
    let presenter = DetailTopicPresenter()
    let router = DetailTopicRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
    
    @IBOutlet weak var textreply: UITextView!
    
    @IBOutlet weak var BtnSendReply: UIButton!
    
    @IBOutlet weak var scrollView: UIScrollView!
   @IBOutlet weak var tv: UITableView!
   @IBOutlet weak var tableHeight: NSLayoutConstraint!

    
    //outleet prepare
    
    @IBOutlet weak var listtag: TagListView!
    @IBOutlet weak var useriimg: UIImageView!
    @IBOutlet weak var nomuser: UILabel!
    @IBOutlet weak var dscrptionntopic: UILabel!
    @IBOutlet weak var titletopic: UILabel!
    
    
// variable  prepare
    
    var idtopic:Int?
    var userimg:String?
    var FirstName:String?
    var LastName:String?
    var TitreTopic:String?
    var descriiptionTopic:String?
    var arrtag :[String] = []
    var NumberReply:Int?
    
    
    let replyservice = ReplyService()
    
    var replyarray: [Reply1] = []




    override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    
    //Set table height to cover entire view
    //if navigation bar is not translucent, reduce navigation bar height from view height
    tableHeight.constant = self.view.frame.height-108
    self.tv.isScrollEnabled = false
    //no need to write following if checked in storyboard
    self.scrollView.bounces = false
    self.tv.bounces = true
    
    useriimg.kf.setImage(with: URL(string: userimg!))
    nomuser.text = (FirstName ?? "") + " " + (LastName ?? "")
    dscrptionntopic.text = descriiptionTopic
    titletopic.text =  TitreTopic
    listtag.removeAllTags()
    listtag.addTags(arrtag)
    
    fetchallreplies()
    design()
    

    
  }
    
    func design(){
        textreply.layer.cornerRadius = 10
        textreply.layer.cornerRadius = 10
        textreply.layer.borderWidth = 1
        textreply.layer.borderColor = #colorLiteral(red: 0.4948643718, green: 0.4948643718, blue: 0.4948643718, alpha: 1)
        
    }
    
    func fetchallreplies(){
        replyservice.getAllReplies(id: idtopic!){ (rooms) in
            self.replyarray = rooms
            self.tv.reloadData()
           
            print(self.replyarray)
         
        }
    }
    
    func designbuttonaftersend(){
           textreply.text = ""
           BtnSendReply.backgroundColor = #colorLiteral(red: 0.7540688515, green: 0.7540867925, blue: 0.7540771365, alpha: 1)
        //   BtnSendReply.isEnabled = false
           
       }
    @IBAction func SendReply(_ sender: Any) {
        let myUrl = Keys.MobileIntegrationServer.baseURL + "/reply"
        
        let parameters: [String: Any] = [
            "reply":textreply.text,
            "reply":
                [
                    "id":idtopic,
                ],
            "user":
                [
                    "id": UserDefaultLogged.idUD,
            ]
        ]
        
        AF.request(myUrl, method: .post, parameters: parameters,encoding: JSONEncoding.init())
            .responseJSON { response in
                print(response.result)
        }
        
        designbuttonaftersend()
    }
    
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = DetailTopic.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: DetailTopic.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}

extension DetailTopicViewController:UITableViewDataSource,UITableViewDelegate{
    
      func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return replyarray.count
        }
        
   func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        
        let view = UIView(frame: CGRect(x: 0, y: 0, width: 20, height: 60))
        let label = UILabel(frame: CGRect(x: 30, y: 5, width: tableView.frame.width, height: 50))
    label.text = "RÃ©ponses (\(NumberReply!))"
        view.backgroundColor = #colorLiteral(red: 0.9182453156, green: 0.9182668328, blue: 0.9182552695, alpha: 1)

        label.textAlignment = .left
        label.font = UIFont(name:"HelveticaNeue-Bold", size: 18.0)
        view.addSubview(label)
        
        return view

    }
        func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
            return 60.0
        }
        
        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
            let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! ReplyTableViewCell
            
            //user info
            let image = replyarray[indexPath.row].user.image
            cell.userimg.kf.setImage(with: URL(string: image))
            cell.username.text = replyarray[indexPath.row].user.firstName + " " + replyarray[indexPath.row].user.lastName
            
            cell.reponse.text = replyarray[indexPath.row].reply
            
            return cell
        }
        
        func scrollViewDidScroll(_ scrollView: UIScrollView) {
            if scrollView == self.scrollView {
                tv.isScrollEnabled = (self.scrollView.contentOffset.y >= 200)
            }
            
            if scrollView == self.tv {
                self.tv.isScrollEnabled = (tv.contentOffset.y > 0)
            }
        }
    
}



    

