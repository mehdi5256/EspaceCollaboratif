//
//  TopicViewController.swift
//  Espace_Collaboratif
//
//  Created by mehdi on 8/4/20.
//  Copyright (c) 2020 mehdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher
import  Alamofire
protocol TopicDisplayLogic: class
{
  func displaySomething(viewModel: Topic.Something.ViewModel)
}

class TopicViewController: UIViewController, TopicDisplayLogic
{
  var interactor: TopicBusinessLogic?
  var router: (NSObjectProtocol & TopicRoutingLogic & TopicDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TopicInteractor()
    let presenter = TopicPresenter()
    let router = TopicRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
    
    var topicarray: [Topic1] = []
    var tagname: [String] = []
    var tagsarray : [Tag] = []
    let topicservice = TopicService()
    
    @IBOutlet weak var tv: UITableView!
    

    override func viewWillAppear(_ animated: Bool) {
          fetchalltopics()
      // getalltopiic()
    }

//    func getalltopiic(){
//         let url = URL(string:"http://26bea6fa3918.ngrok.io/topic/tag")
//
//                var request = URLRequest(url: url!)
//                request.httpMethod = "POST"
//                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
//
//                let values = [] as Any
//
//                request.httpBody = try! JSONSerialization.data(withJSONObject: values)
//
//                AF.request(request)
//                    .responseJSON { response in
//                        // do whatever you want here
//                      print(response.request)
//                                print(response.response)
//                                 print("mmmmmmmmmmmmmmehhhhdiiiii")
//                                 print(response.result)
//
//
//                }
//    }
    
    
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    print(topicarray.count)
    fetchalltopics()
    
    
    


    
    
  }
    
    func fetchalltopics(){
        topicservice.getAllTopics(){ (rooms) in
            self.topicarray = rooms
            self.tv.reloadData()
            for r in rooms{
                
                self.tagsarray = r.tags
            }
            for x in self.tagsarray{
                self.tagname.append(x.name!)
                
            }
            print(self.tagname)
            print("lklklkjljklj")
            print(self.topicarray)
         
        }
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Topic.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Topic.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}

extension TopicViewController: UITableViewDelegate,UITableViewDataSource{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        print(topicarray.count)
        return topicarray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "topiccell", for: indexPath) as! TopicTableViewCell
        
        //user info
        let image = topicarray[indexPath.row].user.image
        cell.UserImage.kf.setImage(with: URL(string: image))
        cell.Username.text = topicarray[indexPath.row].user.firstName + " " + topicarray[indexPath.row].user.lastName
        
        //topic info
        cell.TitleTopic.text = topicarray[indexPath.row].title
//        cell.DescriptionTopic.text = topicarray[indexPath.row].description
        //cell.TagName.text = topicarray[indexPath.row].tags
        cell.CountReply.text = topicarray[indexPath.row].countReplies!.description + " RÃ©ponses"
       // self.tagsarray = topicarray[indexPath.row].tags
        
        var arrtag :[String] = []
        let array2 = topicarray[indexPath.row].tags
        for a in array2{
            arrtag.append(a.name!)
           // print(arrtag)
           

        }
        cell.taglistview.removeAllTags()
        cell.taglistview.addTags(arrtag)
        //print(arrtag)
        


        
        return cell
    }
    
    
}

//extension TopicViewController: UICollectionViewDataSource,UICollectionViewDelegate{
//    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
//        return tagsarray.count
//    }
//    
//    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
//        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "tagcell", for: indexPath) as? TagCollectionViewCell
//            else{
//                return TagCollectionViewCell()
//        }
//        cell.labeltag.text = tagsarray[indexPath.row].name
//        return cell
//        
//    }
    
    
    
    
//}

/*extension TopicViewController: UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return CGSize(width: collectionView.bounds.width, height: collectionView.bounds.height)
    }
    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 10
    }
    
    
   
    
    
}
*/
